"""
Convert raw datasets into the "indiscrim" (indiscriminate) coreference format

{
  "id": str, # example id
  "text": str, # untokenized example text
  "sentences": [
    {
      "id": int, # sentence index
      "text": str, # untokenized sentence text
      "speaker": None, # speaker
      "tokens": [
        {
          # keys are conllu columns: id, text, lemma, upos, xpos, feats, head, deprel, deps, misc
        },
        ...
      ]
    },
    ...
  ],
  "coref_chains": List[List[List[int]]], # list of clusters, each cluster is a list of mentions, each mention is a span represented as [sent, start, end] inclusive
  "genre": str,
  "meta_data": {
      "comment": str,
  },
}
"""

from huggingface_hub import HfApi, HfFileSystem

from indiscrim_conversion.conll2012 import convert_conll2012

api = HfApi()
fs = HfFileSystem()

repo_to_conversion_fn = {
    "coref-data/conll2012_raw": convert_conll2012,
}

README_TEMPLATE = """
This dataset was generated by reformatting [`%s`](https://huggingface.co/datasets/%s) into the indiscrim coreference format.

See [ianporada/coref-data](https://github.com/ianporada/coref-data) for details and the conversion script.

Please create an issue there or in this repo for any questions.
"""

def update_readme_file(repo_name, old_repo_name=None):
    """append a short description to the repo README"""
    assert api.repo_exists(repo_name, repo_type="dataset"), f"{repo_name} does not exist"
    readme_fname = f"datasets/{repo_name}/README.md"

    # would be better to use existing yaml parser at `datasets.utils.metadata.MetadataConfigs`
    old_readme_text = fs.read_text(readme_fname)
    yaml_meta_data = old_readme_text[:old_readme_text.rindex("---")]
    new_readme_text = yaml_meta_data + "\n---\n" + README_TEMPLATE % (old_repo_name, old_repo_name)

    with fs.open(f"datasets/{repo_name}/README.md", "w") as f:
        f.write(new_readme_text)


def convert_raw_to_indiscrim(overwrite=False):
    """call each conversion function"""
    for repo_name, conversion_function in repo_to_conversion_fn.items():
        if not overwrite and api.repo_exists(repo_name, repo_type="dataset"):
            continue
        print(f"Converting dataset {repo_name}")
        conversion_function()

        new_repo_name = repo_name.replace("_raw", "_indiscrim")
        update_readme_file(new_repo_name, old_repo_name=repo_name)


def main():
    # convert all datasets
    convert_raw_to_indiscrim(True)


if __name__ == "__main__":
    main()