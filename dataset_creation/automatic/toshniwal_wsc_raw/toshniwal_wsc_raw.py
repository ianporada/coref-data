"""Gen-Winograd"""

import json

import datasets


logger = datasets.logging.get_logger(__name__)


_CITATION = """\
@misc{whitehouse2023llmpowered,
      title={LLM-powered Data Augmentation for Enhanced Crosslingual Performance}, 
      author={Chenxi Whitehouse and Monojit Choudhury and Alham Fikri Aji},
      year={2023},
      eprint={2305.14288},
      archivePrefix={arXiv},
      primaryClass={cs.CL}
}

@misc{tikhonov2021heads,
    title={It's All in the Heads: Using Attention Heads as a Baseline for Cross-Lingual Transfer in Commonsense Reasoning},
    author={Alexey Tikhonov and Max Ryabinin},
    year={2021},
    eprint={2106.12066},
    archivePrefix={arXiv},
    primaryClass={cs.CL}
}
"""

_DESCRIPTION = """\
English Winograd generated by GPT-4
"""
_LANG = ["en"]
_URL = "https://raw.githubusercontent.com/mbzuai-nlp/gen-X/main/data/gen-winograd/{lang}_winograd.jsonl"
_VERSION = datasets.Version("1.1.0", "")


class GenWinograd(datasets.GeneratorBasedBuilder):
    """GenWinograd"""

    BUILDER_CONFIGS = [
        datasets.BuilderConfig(
            name=lang,
            description=f"Winograd generated by GPT-4 {lang}",
            version=_VERSION,
        )
        for lang in _LANG
    ]

    def _info(self):
        return datasets.DatasetInfo(
            description=_DESCRIPTION,
            features=datasets.Features(
                {
                    "sentence": datasets.Value("string"),
                    "option1": datasets.Value("string"),
                    "option2": datasets.Value("string"),
                    "label": datasets.Value("int32"),
                }
            ),
            supervised_keys=None,
            citation=_CITATION,
        )

    def _split_generators(self, dl_manager):

        downloaded_files = dl_manager.download(_URL.format(lang=self.config.name))
        return [
            datasets.SplitGenerator(
                name=datasets.Split.TRAIN, gen_kwargs={"filepath": downloaded_files}
            )
        ]

    def _generate_examples(self, filepath):
        """This function returns the examples in the raw (text) form."""
        logger.info("Generating examples from = %s", filepath)
        with open(filepath, "r") as f:
            for idx, row in enumerate(f):
                data = json.loads(row)
                yield idx, data